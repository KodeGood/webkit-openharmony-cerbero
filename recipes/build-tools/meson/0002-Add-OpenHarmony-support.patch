From 7a0e3b6a03ce64bf620d924976cab96012e01892 Mon Sep 17 00:00:00 2001
From: Jani Hautakangas <jani@kodegood.com>
Date: Fri, 3 Oct 2025 22:39:36 +0300
Subject: [PATCH] Add OpenHarmony support

---
 mesonbuild/build.py                    | 12 +++++++++++-
 mesonbuild/cmake/toolchain.py          |  1 +
 mesonbuild/compilers/cpp.py            |  2 +-
 mesonbuild/dependencies/dev.py         |  2 +-
 mesonbuild/dependencies/qt.py          | 12 ++++++++++++
 mesonbuild/envconfig.py                |  6 ++++++
 mesonbuild/environment.py              |  1 +
 mesonbuild/utils/universal.py          |  3 +++
 test cases/common/221 zlib/meson.build |  4 ++--
 9 files changed, 38 insertions(+), 5 deletions(-)

diff --git a/mesonbuild/build.py b/mesonbuild/build.py
index 3b420cf83..77e51f39b 100644
--- a/mesonbuild/build.py
+++ b/mesonbuild/build.py
@@ -1225,6 +1225,8 @@ class BuildTarget(Target):
             # Executables must be PIE on Android
             if self.environment.machines[self.for_machine].is_android():
                 self.pie = True
+            elif self.environment.machines[self.for_machine].is_ohos():
+                self.pie = True
             else:
                 self.pie = self._extract_pic_pie(kwargs, 'pie', 'b_pie')
         self.implicit_include_directories = kwargs.get('implicit_include_directories', True)
@@ -1700,6 +1702,8 @@ class BuildTarget(Target):
                     # be linked before they can be dlopen()ed in the correct order. Not doing so
                     # leads to a missing symbol error: https://github.com/android/ndk/issues/201
                     link_target.force_soname = True
+                elif self.environment.machines[self.for_machine].is_ohos() and isinstance(self, SharedModule):
+                    link_target.force_soname = True
                 else:
                     mlog.deprecation(f'target {self.name} links against shared module {link_target.name}, which is incorrect.'
                                      '\n             '
@@ -2326,6 +2330,11 @@ class SharedLibrary(BuildTarget):
             suffix = 'so'
             # Android doesn't support shared_library versioning
             self.filename_tpl = '{0.prefix}{0.name}.{0.suffix}'
+        elif self.environment.machines[self.for_machine].is_ohos():
+            prefix = 'lib'
+            suffix = 'so'
+            # OpenHarmony doesn't support shared_library versioning
+            self.filename_tpl = '{0.prefix}{0.name}.{0.suffix}'
         else:
             prefix = 'lib'
             suffix = 'so'
@@ -2354,7 +2363,8 @@ class SharedLibrary(BuildTarget):
     def process_kwargs(self, kwargs):
         super().process_kwargs(kwargs)
 
-        if not self.environment.machines[self.for_machine].is_android():
+        if (not self.environment.machines[self.for_machine].is_android() and
+            not self.environment.machines[self.for_machine].is_ohos()):
             # Shared library version
             self.ltversion = T.cast('T.Optional[str]', kwargs.get('version'))
             self.soversion = T.cast('T.Optional[str]', kwargs.get('soversion'))
diff --git a/mesonbuild/cmake/toolchain.py b/mesonbuild/cmake/toolchain.py
index be5bd66fd..5acf884d1 100644
--- a/mesonbuild/cmake/toolchain.py
+++ b/mesonbuild/cmake/toolchain.py
@@ -159,6 +159,7 @@ class CMakeToolchain:
             'windows': 'Windows',
             'freebsd': 'FreeBSD',
             'darwin': 'Darwin',
+            'ohos': 'OHOS',
         }
 
         # Only set these in a cross build. Otherwise CMake will trip up in native
diff --git a/mesonbuild/compilers/cpp.py b/mesonbuild/compilers/cpp.py
index 43a5492f0..3700d67fe 100644
--- a/mesonbuild/compilers/cpp.py
+++ b/mesonbuild/compilers/cpp.py
@@ -217,7 +217,7 @@ class _StdCPPLibMixin(CompilerMixinBase):
         # really know the answer in most cases, only the most likely answer,
         # because a user can install things themselves or build custom images.
         search_order: T.List[str] = []
-        if machine.system in {'android', 'darwin', 'dragonfly', 'freebsd', 'netbsd', 'openbsd'}:
+        if machine.system in {'android', 'darwin', 'dragonfly', 'freebsd', 'netbsd', 'openbsd', 'ohos'}:
             search_order = ['c++', 'stdc++']
         else:
             search_order = ['stdc++', 'c++']
diff --git a/mesonbuild/dependencies/dev.py b/mesonbuild/dependencies/dev.py
index 9cf275600..8def6ac7d 100644
--- a/mesonbuild/dependencies/dev.py
+++ b/mesonbuild/dependencies/dev.py
@@ -524,7 +524,7 @@ class ZlibSystemDependency(SystemDependency):
         # I'm not sure this is entirely correct. What if we're cross compiling
         # from something to macOS?
         if ((m.is_darwin() and isinstance(self.clib_compiler, (AppleClangCCompiler, AppleClangCPPCompiler))) or
-                m.is_freebsd() or m.is_dragonflybsd() or m.is_android()):
+                m.is_freebsd() or m.is_dragonflybsd() or m.is_android() or m.is_ohos()):
             # No need to set includes,
             # on macos xcode/clang will do that for us.
             # on freebsd zlib.h is in /usr/include
diff --git a/mesonbuild/dependencies/qt.py b/mesonbuild/dependencies/qt.py
index 25cf610f0..17a6fa7e4 100644
--- a/mesonbuild/dependencies/qt.py
+++ b/mesonbuild/dependencies/qt.py
@@ -102,6 +102,18 @@ def _get_modules_lib_suffix(version: str, info: 'MachineInfo', is_debug: bool) -
             else:
                 mlog.warning(f'Android target arch "{info.cpu_family}"" for Qt5 is unknown, '
                              'module detection may not work')
+        elif if info.is_ohos():
+            if info.cpu_family == 'x86':
+                suffix += '_x86'
+            elif info.cpu_family == 'x86_64':
+                suffix += '_x86_64'
+            elif info.cpu_family == 'arm':
+                suffix += '_armeabi-v7a'
+            elif info.cpu_family == 'aarch64':
+                suffix += '_arm64-v8a'
+            else:
+                mlog.warning(f'OpenHarmony target arch "{info.cpu_family}"" for Qt5 is unknown, '
+                             'module detection may not work')
     return suffix
 
 
diff --git a/mesonbuild/envconfig.py b/mesonbuild/envconfig.py
index 07f1229e3..5873d4c86 100644
--- a/mesonbuild/envconfig.py
+++ b/mesonbuild/envconfig.py
@@ -328,6 +328,12 @@ class MachineInfo(HoldableObject):
         """
         return self.system == 'android'
 
+    def is_ohos(self) -> bool:
+        """
+        Machine is OpenHarmony?
+        """
+        return self.system == 'ohos'
+
     def is_haiku(self) -> bool:
         """
         Machine is Haiku?
diff --git a/mesonbuild/environment.py b/mesonbuild/environment.py
index 2ba20548f..860b65909 100644
--- a/mesonbuild/environment.py
+++ b/mesonbuild/environment.py
@@ -415,6 +415,7 @@ KERNEL_MAPPINGS: T.Mapping[str, str] = {'freebsd': 'freebsd',
                                         'windows': 'nt',
                                         'android': 'linux',
                                         'linux': 'linux',
+                                        'ohos': 'linux',
                                         'cygwin': 'nt',
                                         'darwin': 'xnu',
                                         'dragonfly': 'dragonfly',
diff --git a/mesonbuild/utils/universal.py b/mesonbuild/utils/universal.py
index 93e64c0a2..2243b8f47 100644
--- a/mesonbuild/utils/universal.py
+++ b/mesonbuild/utils/universal.py
@@ -120,6 +120,7 @@ __all__ = [
     'has_path_sep',
     'is_aix',
     'is_android',
+    'is_ohos',
     'is_ascii_string',
     'is_cygwin',
     'is_debianlike',
@@ -641,6 +642,8 @@ def is_linux() -> bool:
 def is_android() -> bool:
     return platform.system().lower() == 'android'
 
+def is_ohos() -> bool:
+    return platform.system().lower() == 'ohos'
 
 def is_haiku() -> bool:
     return platform.system().lower() == 'haiku'
diff --git a/test cases/common/221 zlib/meson.build b/test cases/common/221 zlib/meson.build
index b5b813c76..7395208b2 100644
--- a/test cases/common/221 zlib/meson.build	
+++ b/test cases/common/221 zlib/meson.build	
@@ -1,7 +1,7 @@
 project('zlib system dependency', 'c')
 
-if not ['darwin', 'freebsd', 'dragonfly', 'windows', 'android'].contains(host_machine.system())
-  error('MESON_SKIP_TEST only applicable on macOS, FreeBSD, DragonflyBSD, Windows, and Android.')
+if not ['darwin', 'freebsd', 'dragonfly', 'windows', 'android', 'ohos'].contains(host_machine.system())
+  error('MESON_SKIP_TEST only applicable on macOS, FreeBSD, DragonflyBSD, Windows, Android and OpenHarmony.')
 endif
 
 cc = meson.get_compiler('c')
-- 
2.48.1

