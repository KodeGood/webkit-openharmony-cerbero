From 7516b590139227c7405a11044016710d9b096cf5 Mon Sep 17 00:00:00 2001
From: Jani Hautakangas <jani@kodegood.com>
Date: Mon, 8 Sep 2025 20:06:57 +0000
Subject: [PATCH 05/10] Provide guarded source_location polyfill for toolchains
 without <source_location>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Some OHOS/libc++ builds lack <source_location> or the feature macro, causing
“fatal error: 'source_location' file not found”. Add a small std::source_location
polyfill backed by compiler builtins behind a __has_include guard.
---
 .../platform/network/ResourceErrorBase.h      | 24 ++++++++++++++++++-
 1 file changed, 23 insertions(+), 1 deletion(-)

diff --git a/Source/WebCore/platform/network/ResourceErrorBase.h b/Source/WebCore/platform/network/ResourceErrorBase.h
index b3746de9ac28..e825f1961949 100644
--- a/Source/WebCore/platform/network/ResourceErrorBase.h
+++ b/Source/WebCore/platform/network/ResourceErrorBase.h
@@ -26,7 +26,29 @@
 
 #pragma once
 
-#include <source_location>
+// Prefer C++20 <source_location> when available; otherwise provide a tiny polyfill.
+#if defined(__has_include)
+#  if __has_include(<source_location>)
+#    include <source_location>
+#    define WEBKIT_HAS_STD_SOURCE_LOCATION 1
+#  endif
+#endif
+
+#ifndef WEBKIT_HAS_STD_SOURCE_LOCATION
+namespace std {
+struct source_location {
+    // Minimal API used in WebKit; extend if needed.
+    constexpr source_location() = default;
+    static constexpr source_location current() noexcept { return {}; }
+    constexpr const char* file_name() const noexcept { return __builtin_FILE(); }
+    constexpr const char* function_name() const noexcept { return __builtin_FUNCTION(); }
+    constexpr unsigned line() const noexcept { return __builtin_LINE(); }
+    constexpr unsigned column() const noexcept { return 0; }
+};
+} // namespace std
+#endif
+
+
 #include <wtf/TZoneMalloc.h>
 #include <wtf/URL.h>
 #include <wtf/text/WTFString.h>
-- 
2.48.1

